# Stage 1: Build

# Specifies the base image for the first stage as the official Go 1.17 Alpine image.
# This image already includes the Go compiler and tools needed to build Go applications.
FROM golang:1.17-alpine AS build

# Sets the working directory to /app in the container.
WORKDIR /srcbuild

# Copies the entire current directory (the directory where the Dockerfile is located) to the working directory in the container.
COPY . .

# Downloads the required Go modules (dependencies) specified in the go.mod file.
RUN go mod download

# Builds the Go app and creates an executable binary called app in the current directory.
RUN go build -o app .

# Stage 2: Run
# Specifies the base image for the second stage as the latest Alpine Linux image, which is a lightweight image suitable for running the app.
FROM alpine:latest AS run

# Sets the working directory to /app in the container.
WORKDIR /srcrun

# Copies the app binary from the first stage to the working directory in the second stage.
COPY --from=build /srcbuild /srcrun

#Exposes port 8080 in the container, so that it can be accessed from outside the container.
EXPOSE 8080

# Specifies the command to run when the container starts. In this case, it runs the app binary that was built in the first stage.
CMD ["./app"]